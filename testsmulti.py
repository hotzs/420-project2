from tile import tile
from solver import *
from three_board import three_board
from overlapping import overlapping
from triple_boards import *
from normal_boards import*
from os.path import exists

def init_dict(board,dictionary,num):
    filled = 0
    for key in board:
        dictionary[key].set_num(board[key])
        if board[key] != 0:
            filled +=1
    if num == 2:
        open = (19*9)-filled
    else:
        open = 81-filled
    return open
def test_base():
    board = three_board()
    init_dict(test_board10,board.board_dict,1)
    board.print_board()
    doneboard=CSP_Solver(board,True, True, True, True)
    doneboard.print_board()
    # oboard = overlapping() 
    # init_dict(triple_board9 ,oboard.board_dict)
    # oboard.print_board()
    
    # for key in oboard.board_dict:
    #     print(key," ",oboard.board_dict[key].get_constraints())
    # doneboard.print_board()
def normal_board_tests(MRV,LCV,FC,AC3,f):
    oboard = three_board()
    open = init_dict(test_board1 ,oboard.board_dict,1)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"board1")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED NORMAL 1-----------------------------------------------------")
    oboard = three_board()
    open = init_dict(test_board2 ,oboard.board_dict,1)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"board2")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED NORMAL 2-----------------------------------------------------")
    oboard = three_board()
    open = init_dict(test_board3 ,oboard.board_dict,1)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"board3")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED NORMAL 3-----------------------------------------------------")
    oboard = three_board()
    open = init_dict(test_board4 ,oboard.board_dict,1)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"board4")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED NORMAL 4-----------------------------------------------------")
    oboard = three_board()
    open = init_dict(test_board5 ,oboard.board_dict,1)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"board5")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED NORMAL 5-----------------------------------------------------")
    oboard = three_board()
    open = init_dict(test_board6 ,oboard.board_dict,1)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"board6")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED NORMAL 6-----------------------------------------------------")
    oboard = three_board()
    open = init_dict(test_board7 ,oboard.board_dict,1)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"board7")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED NORMAL 7-----------------------------------------------------")
    oboard = three_board()
    open = init_dict(test_board8 ,oboard.board_dict,1)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"board8")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED NORMAL 8-----------------------------------------------------")
    oboard = three_board()
    open = init_dict(test_board9 ,oboard.board_dict,1)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"board9")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED NORMAL 9-----------------------------------------------------")
    oboard = three_board()
    open = init_dict(test_board10 ,oboard.board_dict,1)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"board10")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED NORMAL 10-----------------------------------------------------")
def overlapping_tests(MRV,LCV,FC,AC3,f):
    oboard = overlapping()
    open = init_dict(triple_board1 ,oboard.board_dict,2)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"tboard1")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED overlapping 1-----------------------------------------------------")
    oboard = overlapping()
    open = init_dict(triple_board2 ,oboard.board_dict,2)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"tboard2")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED overlapping 2-----------------------------------------------------")
    oboard = overlapping()
    open = init_dict(triple_board3 ,oboard.board_dict,2)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"tboard3")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED overlapping 3-----------------------------------------------------")
    oboard = overlapping()
    open = init_dict(triple_board4 ,oboard.board_dict,2)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"tboard4")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED overlapping 4-----------------------------------------------------")
    oboard = overlapping()
    open = init_dict(triple_board5 ,oboard.board_dict,2)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"tboard5")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED overlapping 5-----------------------------------------------------")
    oboard = overlapping()
    open = init_dict(triple_board6 ,oboard.board_dict,2)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"tboard6")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED overlapping 6-----------------------------------------------------")
    oboard = overlapping()
    open = init_dict(triple_board7 ,oboard.board_dict,2)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"tboard7")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED overlapping 7-----------------------------------------------------")
    oboard = overlapping()
    open = init_dict(triple_board8 ,oboard.board_dict,2)
    doneboard=CSP_Solver(oboard,MRV,LCV,FC,AC3,"tboard8")
    write = "open "+ str(open)+ " calls "+str(doneboard.num_calls)
    f.write(write)
    f.write("\n")
    print("FINISHED overlapping 8-----------------------------------------------------")
def all_tests():
    if not exists("log1.txt"):
        f = open("log1.txt","w")
        f.write("Open     Calls\n")
        f.flush()
        f.write("Normal board, MRV, LCV\n")
        f.flush()
        normal_board_tests(True,True,False,False,f)
        f.close()
        print("+++++++++++++++++++++++++++++++++++++++FINISHED 1")
        exit()

    if not exists("log2.txt"):
        f = open("log2.txt","w")
        f.write("Open     Calls\n")
        f.flush()
        f.write("Normal board, FC\n")
        f.flush()
        normal_board_tests(False,False,True,False,f)
        f.close()
        print("+++++++++++++++++++++++++++++++++++++++FINISHED 2")
        exit()

    if not exists("log3.txt"):
        f = open("log3.txt","w")
        f.write("Open     Calls\n")
        f.flush()
        f.write("Normal board, FC\n")
        f.flush()
        normal_board_tests(False,False,False,True,f)
        f.close()
        print("+++++++++++++++++++++++++++++++++++++++FINISHED 3")
        exit()
        
    if not exists("log4.txt"):        
        f = open("log4.txt","w")
        f.write("Open     Calls\n")
        f.flush()
        f.write("Normal board, all\n")
        f.flush()
        normal_board_tests(True,True,True,True,f)
        f.close()
        print("+++++++++++++++++++++++++++++++++++++++FINISHED 4")
        exit()
        
    if not exists("log5.txt"):        
        f = open("log5.txt","w")
        f.write("Open     Calls\n")
        f.flush()
        f.write("overlapping board, MRV, LCV\n")
        f.flush()
        overlapping_tests(True,True,False,False,f)
        f.close()
        print("+++++++++++++++++++++++++++++++++++++++FINISHED 5")
        exit()
        
    if not exists("log6.txt"):        
        f = open("log6.txt","w")
        f.write("Open     Calls\n")
        f.flush()
        f.write("overlapping board, FC\n")
        f.flush()
        overlapping_tests(False,False,True,False,f)
        f.close()
        print("+++++++++++++++++++++++++++++++++++++++FINISHED 6")
        exit()
        
    if not exists("log7.txt"):        
        f = open("log7.txt","w")
        f.write("Open     Calls\n")
        f.flush()
        f.write("overlapping board, FC\n")
        f.flush()
        overlapping_tests(False,False,False,True,f)
        f.close()
        print("+++++++++++++++++++++++++++++++++++++++FINISHED 7")
        exit()
        
    if not exists("log8.txt"):        
        f = open("log8.txt","w")
        f.write("Open     Calls\n")
        f.flush()
        f.write("overlapping board, all\n")
        f.flush()
        overlapping_tests(True,True,True,True,f)
        f.close()

        print("+++++++++++++++++++++++++++++++++++++++FINISHED 8")
        exit()
all_tests()
